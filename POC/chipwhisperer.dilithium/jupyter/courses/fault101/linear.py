import logging
import itertools
from collections import defaultdict
from statistics import mean


class Point:
    __x: int
    __y: int
    __success_rate: float

    @property
    def x(self):
        """This the poly_index."""
        return self.__x

    @property
    def y(self):
        """This is the ext_offset."""
        return self.__y

    @property
    def success_rate(self):
        """This is the success rate."""
        return self.__success_rate

    def __init__(self, x: int, y: int, success_rate: float):
        self.__x = x
        self.__y = y
        self.__success_rate = success_rate

    def slope_and_y_intercept(self, other: 'Point') -> (int, int):
        numerator = self.y - other.y
        denominator = self.x - other.x

        if denominator == 0:
            raise ValueError('Points have the same x coordinate.')

        if numerator % denominator != 0:
            raise ValueError(f'Points slope is not an integer.')

        slope = numerator // denominator

        if slope == 0:
            raise ValueError('Points create a constant.')

        y_intercept = self.y - slope * self.x

        return slope, y_intercept

    def is_on_straight(self, slope, y_intercept):
        return slope * self.x + y_intercept == self.y

    def __repr__(self):
        return f'Point(x={self.x}, y={self.y})'


__LOGGER = logging.getLogger(__name__)


POINTS_RAW = [(59, 0, 0.24242424242424243), (63, 0, 0.36363636363636365), (132, 1, 0.24242424242424243), (136, 1, 0.3484848484848485), (205, 2, 0.3333333333333333), (209, 2, 0.36363636363636365), (274, 3, 0.015151515151515152), (278, 3, 0.3484848484848485), (282, 2, 0.015151515151515152), (282, 3, 0.4393939393939394), (351, 4, 0.19696969696969696), (355, 4, 0.3484848484848485), (424, 5, 0.25757575757575757), (428, 0, 0.015151515151515152), (428, 3, 0.030303030303030304), (428, 5, 0.2878787878787879), (497, 6, 0.2727272727272727), (501, 6, 0.36363636363636365), (570, 7, 0.24242424242424243), (574, 0, 0.015151515151515152), (574, 7, 0.24242424242424243), (643, 8, 0.2727272727272727), (647, 8, 0.4090909090909091), (716, 9, 0.22727272727272727), (720, 7, 0.045454545454545456), (720, 9, 0.3181818181818182), (789, 10, 0.22727272727272727), (793, 9, 0.015151515151515152), (793, 10, 0.3181818181818182), (862, 11, 0.3181818181818182), (866, 11, 0.4393939393939394), (935, 12, 0.22727272727272727), (939, 12, 0.30303030303030304), (1008, 13, 0.24242424242424243), (1012, 11, 0.07575757575757576), (1012, 13, 0.25757575757575757), (1081, 14, 0.30303030303030304), (1085, 14, 0.30303030303030304), (1154, 15, 0.2878787878787879), (1158, 15, 0.3484848484848485), (1227, 16, 0.2727272727272727), (1231, 16, 0.3939393939393939), (1300, 17, 0.21212121212121213), (1304, 15, 0.09090909090909091), (1304, 17, 0.2878787878787879), (1373, 18, 0.25757575757575757), (1377, 11, 0.015151515151515152), (1377, 17, 0.015151515151515152), (1377, 18, 0.3333333333333333), (1446, 19, 0.22727272727272727), (1450, 12, 0.015151515151515152), (1450, 19, 0.45454545454545453), (1463, 20, 0.015151515151515152), (1519, 20, 0.2878787878787879), (1523, 13, 0.015151515151515152), (1523, 20, 0.25757575757575757), (1592, 21, 0.2727272727272727), (1596, 14, 0.015151515151515152), (1596, 19, 0.045454545454545456), (1596, 21, 0.30303030303030304), (1665, 22, 0.25757575757575757), (1669, 15, 0.030303030303030304), (1669, 22, 0.4696969696969697), (1738, 23, 0.30303030303030304), (1742, 23, 0.36363636363636365), (1811, 24, 0.2878787878787879), (1815, 17, 0.015151515151515152), (1815, 24, 0.3484848484848485), (1884, 25, 0.2727272727272727), (1888, 18, 0.015151515151515152), (1888, 23, 0.06060606060606061), (1888, 25, 0.18181818181818182), (1957, 26, 0.18181818181818182), (1961, 26, 0.3484848484848485), (2030, 27, 0.25757575757575757), (2034, 27, 0.25757575757575757), (2103, 28, 0.22727272727272727), (2107, 28, 0.4393939393939394), (2176, 29, 0.22727272727272727), (2180, 27, 0.045454545454545456), (2180, 29, 0.21212121212121213), (2249, 30, 0.19696969696969696), (2253, 30, 0.3484848484848485), (2322, 31, 0.2655367231638418), (2326, 31, 0.3116883116883117), (2395, 32, 0.21212121212121213), (2399, 32, 0.3181818181818182), (2468, 33, 0.21212121212121213), (2472, 31, 0.045454545454545456), (2472, 33, 0.3181818181818182), (2541, 34, 0.18181818181818182), (2545, 34, 0.3787878787878788), (2614, 35, 0.24242424242424243), (2618, 28, 0.015151515151515152), (2618, 35, 0.4090909090909091), (2687, 36, 0.16666666666666666), (2691, 36, 0.3484848484848485), (2760, 37, 0.19696969696969696), (2764, 30, 0.030303030303030304), (2764, 35, 0.030303030303030304), (2764, 37, 0.30303030303030304), (2833, 38, 0.21212121212121213), (2837, 38, 0.24242424242424243), (2906, 39, 0.19696969696969696), (2910, 39, 0.3181818181818182), (2979, 40, 0.19696969696969696), (2983, 40, 0.42424242424242425), (3052, 41, 0.24242424242424243), (3056, 39, 0.030303030303030304), (3056, 41, 0.24242424242424243), (3124, 42, 0.015151515151515152), (3125, 42, 0.24242424242424243), (3129, 42, 0.2727272727272727), (3198, 43, 0.15151515151515152), (3202, 43, 0.4393939393939394), (3271, 44, 0.22727272727272727), (3275, 44, 0.2878787878787879), (3344, 45, 0.13636363636363635), (3348, 43, 0.07575757575757576), (3348, 45, 0.2727272727272727), (3417, 46, 0.21212121212121213), (3421, 46, 0.3787878787878788), (3490, 47, 0.21212121212121213), (3494, 47, 0.3181818181818182), (3563, 48, 0.19696969696969696), (3567, 48, 0.36363636363636365), (3636, 49, 0.2878787878787879), (3640, 47, 0.06060606060606061), (3640, 49, 0.30303030303030304), (3709, 50, 0.21212121212121213), (3713, 43, 0.015151515151515152), (3713, 50, 0.3484848484848485), (3782, 51, 0.2727272727272727), (3786, 44, 0.015151515151515152), (3786, 51, 0.3181818181818182), (3855, 52, 0.22727272727272727), (3859, 45, 0.015151515151515152), (3859, 52, 0.21212121212121213), (3928, 53, 0.24242424242424243), (3932, 51, 0.06060606060606061), (3932, 53, 0.3181818181818182), (4001, 54, 0.30303030303030304), (4005, 54, 0.30303030303030304), (4074, 55, 0.2878787878787879), (4078, 55, 0.4090909090909091), (4147, 56, 0.2727272727272727), (4151, 49, 0.015151515151515152), (4151, 56, 0.24242424242424243), (4220, 57, 0.2878787878787879), (4224, 50, 0.030303030303030304), (4224, 55, 0.030303030303030304), (4224, 57, 0.25757575757575757), (4293, 58, 0.19696969696969696), (4297, 58, 0.3484848484848485), (4366, 59, 0.19696969696969696), (4370, 59, 0.2878787878787879), (4439, 60, 0.3181818181818182), (4443, 60, 0.2878787878787879), (4512, 61, 0.19696969696969696), (4516, 59, 0.09090909090909091), (4516, 61, 0.24242424242424243), (4585, 62, 0.22727272727272727), (4589, 62, 0.3484848484848485)]
"""POINTS_RAW is a list with tuples. The first entry of each tuple is the ext_offset, the second entry is the 
poly_index and the third is the success rate"""
assert len(set(POINTS_RAW)) == len(POINTS_RAW)

POINTS_RAW = sorted(list(set(POINTS_RAW)))

POINTS = list(map(lambda p_r: Point(p_r[1], p_r[0], p_r[-1]), POINTS_RAW))


def get(points) -> list:
    points = sorted(list(set(points)))
    points = list(map(lambda p_r: Point(p_r[1], p_r[0], p_r[-1]), points))

    polys = {}
    num_comb = 0
    for point_a, point_b in itertools.combinations(set(points), 2):
        num_comb += 1
        assert point_a != point_b  # this should be assured by itertools
        try:
            slope, y_intercept = point_a.slope_and_y_intercept(point_b)
            # print(point_a)
            # print(point_b)
            # print((slope, y_intercept))

            polys[(slope, y_intercept)] = 0
        except ValueError:
            pass

    matched_polys = defaultdict(list)
    for straight in polys.keys():
        slope, y_intercept = straight
        for point in points:
            if point.is_on_straight(slope, y_intercept):
                matched_polys[straight].append(point)
                polys[straight] += 1
    result = []
    for poly, num_matches in reversed(sorted(polys.items(), key=lambda x: (x[1], x[0]))):
        if num_matches > 3:
            success_rate = mean(map(lambda p: p.success_rate, matched_polys[poly]))
            __LOGGER.debug(f'{poly} [{len(matched_polys[poly])}]: {success_rate}')
            result.append((poly, len(matched_polys[poly]), success_rate))

    res = list(reversed(sorted(result, key=lambda x: (x[1], x[2]))))

    res_dicts = []
    for straight_line in res:
        res_dict = {}
        res_dict['slope'] = straight_line[0][0]
        res_dict['y_intercept'] = straight_line[0][1]
        res_dict['num_points'] = straight_line[1]
        res_dicts.append(res_dict)
    return res_dicts


def main() -> None:
    logging.basicConfig(level=logging.DEBUG)
    __LOGGER.debug("main")
    res = get(POINTS_RAW)
    print(res)


if __name__ == '__main__':
    main()

